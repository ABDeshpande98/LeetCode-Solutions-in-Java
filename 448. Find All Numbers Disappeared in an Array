Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n

Solution Code : 
====================
We can use HashSet for storing all the numbers in the array. Later we can verify whether a number is missing from the 
array and if yes, then we can add it to the ArralyList and return the same.

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
       int n = nums.length;
       Set<Integer> set = new HashSet<>();
       ArrayList<Integer> finalList = new ArrayList<Integer>();

       for(int i = 0; i<n; i++)
       {
           set.add(nums[i]);
       }

       for(int i = 1; i<= n; i++)
       {
           if(!set.contains(i)){
               finalList.add(i);
           }
       }

       return finalList;
    }
}


Runtime : 17ms
