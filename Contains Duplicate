Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.


Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true


==> Approach 1 :  Brute Force Approach : 
===========================================
code : 

class Solution {
    public boolean containsDuplicate(int[] nums) {
        int count  = 0;

        for(int i = 0; i<nums.length - 1; i++)
        {
            for(int j = i+1; j<nums.length; j++)
            {
                if(nums[i] == nums[j])
                {
                    count++;
                }
            }
        }

        if(count>0){
            return true;
        }
        else{
            return false;
        }
    }
}


Time Complexity - O(N^2)
Most of the times you will get time limit exceeded error for this kind of approach.
Test Cases passed : 63/75



==> Approach 2 :  Using any sorting algorithm : 
==================================================
We will be using any sorting algorithm and will check whether adjacent numbers are equal. If they are equal, we return true. Else we return false.

Code : 

class Solution {
    public boolean containsDuplicate(int[] nums) {
            Arrays.sort(nums);
            for(int i = 0; i<nums.length - 1; i++)
            {
                if(nums[i] == nums[i+1])
                {
                    return true;
                }
            }

            return false;
    }
}

Time Complexity - O(NlogN)
Runtime - 20 ms
Beats 27.57% of users with Java.

This is much better than the previous approach and passes all the test cases.
However, we can still try to improve this code using HashSet.


==> Approach 3 :  Using HashSet in Java : 
==================================================

Code : 

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> hashSet = new HashSet<>();

        for(int i = 0; i<nums.length;i++)
        {
            if(hashSet.contains(nums[i])){
                return true;
            }
            else{
                hashSet.add(nums[i]);
            }
        }

        return false;

    }
}


This is the best approach. Runetime is less.

Time Complexity - > O(n)
Space Complexity - > O(n)
Runtime -> 12 ms






