Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1

Solution using Brute Force : 
====================================
class Solution {
    public int singleNumber(int[] nums) {
        int count = 0;

        for(int i = 0; i<nums.length; i++)
        {
            count = 0;
            for(int j = 0;j<nums.length; j++)
            {
                if(nums[i] == nums[j])
                {
                    count++;
                } 

            }

            if(count == 1){
                return nums[i];
            }

        }
    return 0;
    }

}



This can be optimized even more by using the concept of XOR. The Solution for the same is below :
Optimized Solution : 
========================

class Solution {
    public int singleNumber(int[] nums) {
          int res = nums[0];
          for(int i = 1;i < nums.length; i++)
          {
              res = res ^ nums[i];
          }

          return res;
    }

}


This solution works in O(n) time but requires extra space.

The best solution is to use XOR. XOR of all array elements gives us the number with a single occurrence. The idea is based on the following two facts. 

XOR of a number with itself is 0. 
XOR of a number with 0 is number itself.
Let us consider the above example.  
Let ^ be xor operator as in C and C++, Java.

res = 7 ^ 3 ^ 5 ^ 4 ^ 5 ^ 3 ^ 4

Since XOR is associative and commutative, above 
expression can be written as:
res = 7 ^ (3 ^ 3) ^ (4 ^ 4) ^ (5 ^ 5)  
    = 7 ^ 0 ^ 0 ^ 0
    = 7 ^ 0
    = 7 
